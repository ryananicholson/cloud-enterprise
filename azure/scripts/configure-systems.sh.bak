#!/bin/bash

# Variables
RESOURCE_GROUP=$1
WORKID=$(jq -r '.resources[] | select(.type == "azurerm_log_analytics_workspace") .instances[].attributes.workspace_id' terraform.tfstate)
WORKKEY=$(jq -r '.resources[] | select(.type == "azurerm_log_analytics_workspace") .instances[].attributes.primary_shared_key' terraform.tfstate)
TOKEN=$(pwsh -c '(New-AzWvdRegistrationInfo -ResourceGroupName cent -HostPoolName cent-pool -ExpirationTime $((get-date).ToUniversalTime().AddHours(2).ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ"))).Token' | grep -v VERBOSE | tr -d '\n')

# Install ansible.windows
ansible-galaxy collection install ansible.windows

# Enable WinRM on all Windows systems
for VM in $(az vm list | jq -r '.[] | select(.osProfile.windowsConfiguration != null) .name'); do
  az vm run-command invoke -g $RESOURCE_GROUP -n $VM --command-id RunPowerShellScript --scripts "Invoke-Expression ((New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1'))" 1>/dev/null
done

# Configure AD
cat << EOF > ad-hosts
[hosts:children]
ad

[ad]
EOF

AD=$(az vm list -g $RESOURCE_GROUP | jq -r '.[] | select(.storageProfile.imageReference.offer == "WindowsServer") .name')
az vm show -d -g $RESOURCE_GROUP -n $AD --query publicIps -o tsv >> ad-hosts
cat << 'EOF' >> ad-hosts
[ad:vars]
ansible_connection=winrm
ansible_ssh_port=5986
ansible_ssh_user=adminuser
ansible_ssh_pass=PASSWORD
ansible_winrm_transport=basic
ansible_winrm_server_cert_validation=ignore
EOF
sed -i "s/DOMAIN/$RESOURCE_GROUP/g" playbooks/dc.yml
sed -i "s@WORKID@$WORKID@g" playbooks/dc.yml
sed -i "s@WORKKEY@$WORKKEY@g" playbooks/dc.yml
sed -i "s@REGTOKEN@$TOKEN@g" playbooks/dc.yml 
ansible-playbook -i ad-hosts playbooks/dc.yml

# Configure Workstations
cat << EOF > wkstn-hosts
[hosts:children]
wkstn

[wkstn]
EOF

WKSTNS=$(az vm list -g $RESOURCE_GROUP | jq -r '.[] | select(.storageProfile.imageReference.offer == "Windows-10") .name')
for WKSTN in $WKSTNS; do
  az vm show -d -g $RESOURCE_GROUP -n $WKSTN --query publicIps -o tsv >> wkstn-hosts
done

cat << 'EOF' >> wkstn-hosts
[wkstn:vars]
ansible_connection=winrm
ansible_ssh_port=5986
ansible_ssh_user=adminuser
ansible_ssh_pass=PASSWORD
ansible_winrm_transport=basic
ansible_winrm_server_cert_validation=ignore
EOF

DNSADDR=$(az vm show -d -g $RESOURCE_GROUP -n $AD --query privateIps -o tsv)
sed -i "s/DOMAIN/$RESOURCE_GROUP/g" playbooks/wkstn.yml
sed -i "s/DNSADDR/$DNSADDR/g" playbooks/wkstn.yml
sed -i "s@WORKID@$WORKID@g" playbooks/wkstn.yml
sed -i "s@WORKKEY@$WORKKEY@g" playbooks/wkstn.yml
sed -i "s@REGTOKEN@$TOKEN@g" playbooks/wkstn.yml 
ansible-playbook -i wkstn-hosts playbooks/wkstn.yml

# Configure Ubuntu
wget https://github.com/microsoft/OMS-Agent-for-Linux/releases/download/OMSAgent_v1.13.33-0/omsagent-1.13.33-0.universal.x64.sh -O playbooks/files/log-agent.sh
if ! [ -z ~/.local/lib/python3.7/site-packages/paramiko ]; then
  pip3 install paramiko
fi
cat << EOF > ubuntu-hosts
[hosts:children]
ubuntu

[ubuntu]
EOF
UBUNTU=$(az vm list -g $RESOURCE_GROUP | jq -r '.[] | select(.osProfile.linuxConfiguration.disablePasswordAuthentication == false) .name')
az vm show -d -g $RESOURCE_GROUP -n $UBUNTU --query publicIps -o tsv >> ubuntu-hosts
cat << 'EOF' >> ubuntu-hosts
[ubuntu:vars]
ansible_connection=paramiko
ansible_ssh_port=22
ansible_ssh_user=adminuser
ansible_ssh_pass=PASSWORD
EOF

sed -i "s@WORKID@$WORKID@g" playbooks/ubuntu.yml
sed -i "s@WORKKEY@$WORKKEY@g" playbooks/ubuntu.yml
ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ubuntu-hosts playbooks/ubuntu.yml
WORKNAME=$RESOURCE_GROUP-workspace
pwsh -c "New-AzOperationalInsightsLinuxSyslogDataSource -ResourceGroupName $RESOURCE_GROUP -WorkspaceName $WORKNAME -Facility \"syslog\" -CollectEmergency -CollectAlert -CollectCritical -CollectError -CollectWarning -Name \"syslog collection\""
pwsh -c "New-AzOperationalInsightsLinuxSyslogDataSource -ResourceGroupName $RESOURCE_GROUP -WorkspaceName $WORKNAME -Facility \"auth\" -CollectEmergency -CollectAlert -CollectCritical -CollectError -CollectWarning -Name \"auth collection\""
pwsh -c "New-AzOperationalInsightsLinuxSyslogDataSource -ResourceGroupName $RESOURCE_GROUP -WorkspaceName $WORKNAME -Facility \"kern\" -CollectEmergency -CollectAlert -CollectCritical -CollectError -CollectWarning -Name \"kern collection\""
